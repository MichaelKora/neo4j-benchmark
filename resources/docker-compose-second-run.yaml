---
version: "3"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    hostname: zookeeper
    restart: on-failure
    networks:
      - kafka-network
    environment:
      SCHEMA_REGISTRY_HOST_NAME: zookeeper
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    restart: on-failure
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - kafka-network
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL_SAME_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_SCHEMA_REGISTRY_URL: "schema-registry:8081"

  console:
    image: vectorized/console:v2.0.2
    container_name: console
    restart: on-failure
    hostname: console
    volumes:
      - ./console-config.yaml:/etc/console/console-config.yaml
    networks:
      - kafka-network
    ports:
      - "8080:8080"
    entrypoint: ./console --config.filepath=/etc/console/console-config.yaml
    depends_on:
      kafka:
        condition: "service_healthy"

  neo4j:
    image: neo4j:4.4.11
    hostname: neo4j
    container_name: neo4j
    networks:
      - kafka-network
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - $PWD/neo4j/plugins:/plugins
      - $PWD/neo4j/conf:/var/lib/neo4j/conf/
    environment:
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_AUTH: neo4j/connect
      NEO4J_kafka_bootstrap_servers: kafka:9093
      NEO4JLABS_PLUGINS: '["apoc"]'
    depends_on:
      kafka:
        condition: "service_healthy"
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s

  connect:
    image: confluentinc/cp-kafka-connect:7.2.1
    container_name: kafka-connect
    hostname: connect
    restart: on-failure
    depends_on:
      neo4j:
        condition: "service_healthy"
    networks:
      - kafka-network
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
    command:
      - bash
      - -c
      - |
        echo "Installing Connector"
        confluent-hub install neo4j/kafka-connect-neo4j:2.0.2 --no-prompt
        # confluent-hub install confluentinc/kafka-connect-protobuf-converter:7.1.1 --no-prompt
        confluent-hub install confluentinc/kafka-connect-avro-converter:7.2.1 --no-prompt
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity

  python-data-producer:
    depends_on:
      kafka:
        condition: "service_healthy"
      connect:
        condition: "service_started"
    restart: on-failure
    build:
      context: ./python-producer
      dockerfile: ./Dockerfile-python-producer
    networks:
      - kafka-network

  # start connector benchmark only if all producers are done producing the data
  connector-benchmark:
    depends_on:
      neo4j:
        condition: "service_started"
      python-data-producer:
        condition: "service_completed_successfully"
    build:
      context: ./kafka-client
      dockerfile: ./Dockerfile-kafka-client
    networks:
      - kafka-network
    volumes:
      - $PWD/measurements/connetor-benchmark:/tmp/my-data

  workload-generator:
    depends_on:
      connector-benchmark:
        condition: "service_completed_successfully"
    restart: on-failure
    build:
      context: ./workload-generator
      dockerfile: ./Dockerfile-workload-generator
    volumes:
      - $PWD/measurements/workload-generator:/app/my-data
    networks:
      - kafka-network

networks:
  kafka-network:
    {}
    # driver: bridge
