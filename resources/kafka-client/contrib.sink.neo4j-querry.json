{
    "name": "Neo4jSinkConnector",
    "config": {
      "topics": "trials, pubmed, pmc",
      "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
      "errors.retry.timeout": "-1",
      "errors.retry.delay.max.ms": "1000",
      "errors.tolerance": "all",
      "errors.log.enable": true,
      "errors.log.include.messages": true,
      "neo4j.server.uri": "bolt://neo4j:7687",
      "neo4j.authentication.basic.username": "neo4j",
      "neo4j.authentication.basic.password": "connect",
      "neo4j.encryption.enabled": false,
      "neo4j.topic.cypher.trials": "CREATE CONSTRAINT IF NOT EXISTS FOR (t:Trial) require t.id IS UNIQUE MERGE(t:Trial{id: event.id}) WITH event, t UNWIND event.entity_counts AS entity_count CREATE CONSTRAINT IF NOT EXISTS FOR (e:Entity) require e.id IS UNIQUE MERGE(e:Entity{id: entity_count.key}) SET e.name = entity_count.name, e.type = entity_count.type WITH entity_count, t, e CALL apoc.merge.relationship(t, 'MENTIONS', {section: entity_count.section}, {count: entity_count.count}, e) YIELD rel RETURN rel",
      "neo4j.topic.cypher.pubmed": "CREATE CONSTRAINT IF NOT EXISTS FOR (p:Pubmed) require p.id IS UNIQUE MERGE(p:Pubmed{id: event.id}) WITH event, p UNWIND event.entity_counts AS entity_count CREATE CONSTRAINT IF NOT EXISTS FOR (e:Entity) require e.id IS UNIQUE MERGE(e:Entity{id: entity_count.key}) SET e.name = entity_count.name, e.type = entity_count.type WITH entity_count, p, e CALL apoc.merge.relationship(p, 'MENTIONS', {section: entity_count.section}, {count: entity_count.count}, e) YIELD rel RETURN rel",
      "neo4j.topic.cypher.pmc": "CREATE CONSTRAINT IF NOT EXISTS FOR (pmc:Pmc) require pmc.id IS UNIQUE MERGE(pmc:Pmc{id: event.id}) WITH event, pmc UNWIND event.entity_counts AS entity_count CREATE CONSTRAINT IF NOT EXISTS FOR (e:Entity) require e.id IS UNIQUE MERGE(e:Entity{id: entity_count.key}) SET e.name = entity_count.name, e.type = entity_count.type WITH entity_count, pmc, e CALL apoc.merge.relationship(pmc, 'MENTIONS', {section: entity_count.section}, {count: entity_count.count}, e) YIELD rel RETURN rel"
    }
  }

  CREATE CONSTRAINT IF NOT EXISTS FOR (t:Trial) require t.id IS UNIQUE
  CREATE CONSTRAINT IF NOT EXISTS FOR (p:Pubmed) require p.id IS UNIQUE
  CREATE CONSTRAINT IF NOT EXISTS FOR (pmc:Pmc) require pmc.id IS UNIQUE

entity_name_range_index = '''
CREATE INDEX entity_name_range_index IF NOT EXISTS
FOR (e:Entity) ON (e.name)
'''

entity_type_range_index = '''
CREATE INDEX entity_type_range_index IF NOT EXISTS
FOR (e:Entity) ON (e.type)
'''